{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","webpack:///../../../../../src/.internal/charts/types/FlowDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/LabelBullet.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyNode.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyLink.ts","webpack:///../../../../../src/.internal/charts/types/SankeyDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelSlice.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelTick.ts","webpack:///../../../../../src/.internal/charts/series/FunnelSeries.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///./charts.js"],"names":["DateAxisBreak_DateAxisBreak","_super","DateAxisBreak","_this","call","this","className","applyTheme","tslib_es6","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","startValue","getTime","axis","invalidate","invalidateSeries","endValue","ValueAxisBreak","Registry","registeredClasses","DateAxis_DateAxisDataItem","DateAxisDataItem","values","date","endDate","dates","setDate","ValueAxis","DateAxis_DateAxis","DateAxis","gridIntervals","List","dateFormats","Dictionary","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","snapTooltip","pushAll","axisFieldName","fillRule","dataItem","component","gridInterval","_gridInterval","gridDuration","Time","Math","round","min","axisFill","__disabled","applyInternalDefaults","hasKey","setKey","language","translate","createDataItem","createAxisBreak","validateDataItems","start","end","periodCount","max","baseDuration","maxZoomFactor","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","adjustDifference","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","getFirstWeekDay","dateFormatter","utc","_nextGridUnit","_intervalDuration","ceil","_difference","floor","Iterator","series","iterator","baseAxis","field_1","getAxisField","startIndex","dataItems","findClosestIndex","x","maxZoomed","endIndex","validateData","Type","minDifference","Number","MAX_VALUE","each","uid","seriesDataChangeUpdate","postProcessSeriesDataItems","JSON","stringify","_baseInterval","postProcessSeriesDataItem","addEmptyUnitsBreaks","dataItemsByAxis","getKey","utils_Object","key","time","getDate","startTime","setCalculatedValue","toString","skipEmptyPeriods","axisBreaks","clear","axisBreak","this_1","startTimeStr","undefined","create","startDate","fixAxisBreaks","length","breakGridCount","endPosition","startPosition","adjustedEndValue","adjustedStartValue","gridDate","firstDayOfWeek","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","isInBreak","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","resetIterators","this_2","format","markUnitChange","text","find","appendDataItem","validateDataElement","renderer_1","renderer","breakSize","timeUnit_1","intervalCount_1","utils_Math","startPoint","endPoint","minGridDistance","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","position","valueToPosition","fillEndPosition","isRange","tick","disabled","updateTickElement","grid","updateGridElement","fill","updateFillElement","mask","label","location_1","location","updateLabelElement","adjustMinMax","step","fixMin","startLocation","fixMax","endLocation","index","duration","gridCount","getIndex","intervalDuration","lastIndex","formatLabel","dateToPosition","anyToPosition","dateToPoint","point","positionToPoint","angle","positionToAngle","y","anyToPoint","valueToPoint","positionToDate","positionToValue","getX","getTimeByLocation","baseValue","getY","stack","getValue","getAngle","stackKey","workingLocations","endTime","processSeriesDataItem","axisLetter","openTime","openDate","prevSeriesTime","_prevSeriesTime","difference","abs","differece","updateAxisBySeries","timeInterval","invalidateData","breakTemplate","template","startLine","endLine","fillShape","getTooltipText","tooltipDateFormat","dateFormat","getPositionLabel","adapter","apply","roundPosition","getCellStartPosition","getCellEndPosition","getSeriesDataItem","findNearest","key_1","getCurrentLabelFormat","initRenderer","ticks","labels","baseGrid","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","asIs","field","copyFrom","source","showTooltipAtPosition","local","toAxisPosition","closestDate_1","actualTime_1","xAxis","dateX","yAxis","dateY","closestTime_1","tooltipLocation","seriesPoints_1","showTooltipAtDataItem","push","tooltipText","hideTooltip","chart","sortSeriesTooltips","makeGap","previous","connect","autoGapCount","CategoryAxisBreak_CategoryAxisBreak","CategoryAxisBreak","indexToPosition","invalidateDataItems","category","categoryToIndex","AxisBreak","CategoryAxis_CategoryAxisDataItem","CategoryAxisDataItem","Adapter","locations","endCategory","isEnabled","properties","setProperty","Axis","CategoryAxis_CategoryAxis","CategoryAxis","dataItemsByCategory","_lastDataItem","_disposers","validateDataRange","_series","invalidateDataRange","firstSeriesDataItem","lastSeriesDataItem","positionToIndex","i","fdi","getFirstSeriesDataItem","ldi","getLastSeriesDataItem","validate","dataCount","invalid","maxCount","axisLength","frequency","_startIndex","_endIndex","_frequency","itemIndex","len","frequency_1","itemIndex_1","b","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","fillEndIndex","fillPosition","measuredWidth","measuredHeight","currentText","disposeData","processDataItem","dataContext","getDataItem","dataFields","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","categoryX","categoryY","index_1","sdi_1","category_1","seriesDataItem","categories","basePoint","breakStartPosition","breakEndPosition","breakPosition","positionToCategory","XYSeries_XYSeriesDataItem","XYSeriesDataItem","valueX","valueY","openValueX","openValueY","openDateX","openDateY","setLocation","setValue","setCategory","openCategoryX","openCategoryY","getMin","fields","working","stackValue","utils_Array","getWorkingValue","getMax","Series","XYSeries_XYSeries","XYSeries","_xAxis","Disposer","_yAxis","_xValueFields","_yValueFields","isMeasured","cursorTooltipEnabled","cursorHoverEnabled","mainContainer","Sprite","setElement","paper","add","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","readerTitle","dataChangeUpdate","_tmin","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","Error","name","disable","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","dataItemsX","dataItemsY","xAxisFieldName","xField","xOpenField","Utils","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","axisRanges","range","fillPath","path","Path","width","height","dataRangeInvalid","pixelY","pixelX","_showBullets","minBulletDistance","get","xAxes","oldAxis","removeKey","dispose","removeValue","set","registerSeries","yAxes","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","dispatchImmediately","appeared","_prevTooltipDataItem","xPosition","yPosition","visible","isHiding","isShowing","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","type","target","_a","sprites","_b","next","done","sprite","parent","isHidden","isHover","showTooltip","isDisposed","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","locationX","locationY","moveTo","bulletLocation","show","anim","delay","interpolationDuration","defaultState","transitionDuration","a","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","hide","minZoomed","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","backwards","prevSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","processingErrors","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","Cursor_Cursor","Cursor","_stick","Percent","shouldClone","trackable","clickable","interaction","Interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","event","interactionsEnabled","_generalBehavior","downPoint","isLocalElement","pointer","svg","_stickPoint","fitsToBounds","triggerMove","hideReal","stick","triggerMoveReal","invalidatePosition","getPositions","dispatch","triggerDown","triggerDownReal","setGlobalStyle","Mouse","grabbing","triggerUp","triggerUpReal","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","interactions","default","updateSelection","innerWidth","innerHeight","cancelable","shouldPreventGestures","preventDefault","plotContainer","lockElement","Container","XYCursor_XYCursor","XYCursor","_lineX","_lineY","behavior","maxPanOut","interfaceColors","InterfaceColorSet","selection","createChild","fillOpacity","getFor","lineX","stroke","Color","strokeDasharray","strokeOpacity","lineY","updateSize","_usesSelection","w","_positionPrecision","h","pixelHeight","pixelWidth","validatePosition","fixPoint","snapToSeries","updateLinePositions","getPanningRanges","selectionX","selectionY","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","_snapToDisposer","handleSnap","opposite","xx","yy","animationDuration","easing","animationEasing","animate","property","to","XYChartScrollbar_XYChartScrollbar","XYChartScrollbar","padding","scrollbarChart","XYChart_XYChart","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","toBack","_unselectedOverlay","background","cornerRadius","thumbBackground","thumb","hoverState","states","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","newValue","zoomOutButton","addXAxis","addYAxis","clone","title","rangeChangeDuration","id","inside","line","minLabelPosition","maxLabelPosition","axisFills","showOnInit","zoomOutAxes","filters","DesaturateFilter","updateByOrientation","orientation","clonedFrom","oldValue","off","handleDataChanged","dataProvider","updateThumb","Scrollbar","XYChart_XYChartDataItem","XYChartDataItem","SerialChart","XYChart","_axisRendererX","AxisRendererX","_axisRendererY","AxisRendererY","maskBullets","arrangeTooltips","chartContainer","layout","topAxesCont","zIndex","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","bulletsContainer","ZoomOutButton","align","valign","MAX_SAFE_INTEGER","marginTop","marginRight","_bulletMask","exportable","draw","toFront","updateSeriesLegend","updatePlotElements","_parseDataFrom","leftAxesWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","updateXAxis","handleYAxisChange","updateYAxis","processXAxis","observe","handleXAxisRangeChange","processAxis","processYAxis","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","seriesAppeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","processRenderer","_dataUsers","gridContainer","breakContainer","addDisposer","dataUsers","inited","_xAxes","handleAxisRemoval","autoDispose","_yAxes","removeFromInvalidComponents","dataInvalid","colors","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","showSeriesTooltip","exceptAxis","showAxisTooltip","hideObjectTooltip","seriesPoints","setBounds","topLeft","bottomRight","sum","filteredSeriesPoints","seriesPoint","sort","averageY","svgContainer","SVGContainer","top_1","bottom","dropped","nextHeight","pointY","pixelMarginTop","nextY","pixelMarginBottom","except","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","axisRange","newStart","newEnd","newRange","_scrollbarX","startGrip","endGrip","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","declination","realRange","diff","handleWheel","svgPoint","htmlContainer","cssScale","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","maxWidth","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","createSeries","_zoomOutButton","button","addData","rawDataItem","removeCount","Responsive","relevant","maybeXS","state","stateId","LineSeriesSegment_LineSeriesSegment","LineSeriesSegment","fillSprite","strokeSprite","drawSegment","points","closePoints","smoothnessX","smoothnessY","Smoothing","smooth","lineElement","fillElement","LineSeries_LineSeriesDataItem","LineSeriesDataItem","LineSeries_LineSeries","LineSeries","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegmentWrapper","_adjustedStartIndex","sliceData","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","propertyFields","openIndex","params","openSegment","addToClose","closeIndex","propertiesChanged","getFirst","contents","hasProperties","updateSegmentProperties","addPoints","closeSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","Line","x2","Rectangle","legendDataItem","color","colorOrig","bullets","copyToLegendMarker","hasLabels_1","children","child","Label","RadarSeries_RadarSeriesDataItem","RadarSeriesDataItem","RadarSeries_RadarSeries","RadarSeries","connectEnds","radius","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","RadarCursor_RadarCursor","RadarCursor","innerRadius","truePixelRadius","updateLineX","updateLineY","fillStartAngle","arc","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","sin","cos","upAngle","upRadius","setPercentProperty","innerRadiusModifyer","AxisFillCircular_AxisFillCircular","AxisFillCircular","AxisFill","GridCircular_GridCircular","GridCircular","pixelPerfect","Grid","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","useChartAngles","setAxis","atan2","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","fixPosition","invalidateAxisItems","createGrid","createFill","createLabel","AxisLabelCircular","pointToPosition","coordinateToPosition","AxisRenderer","AxisRendererRadial_AxisRendererRadial","AxisRendererRadial","gridType","axisAngle","horizontalCenter","verticalCenter","rotation","gridLocation","count_1","cellEndLocation","positionItem","updateBaseGridElement","count_2","updateBreakElement","createBreakSprites","WavedCircle","updateTooltip","tooltipOrientation","bigNum","axisFullLength","RadarChart_RadarChartDataItem","RadarChartDataItem","RadarChart_RadarChart","RadarChart","radarContainer","Circle","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","_pixelInnerRadius","definedBBox","ClockHand_ClockHand","ClockHand","_axis","pin","startWidth","endWidth","hand","Trapezoid","leftSide","rightSide","x0","x1","_pin","_hand","showValue","_value","newAngle","currentAngle","rotationDirection","updateValue","GaugeChart_GaugeChartDataItem","GaugeChartDataItem","GaugeChart_GaugeChart","GaugeChart","hands","processHand","PieSeries3D_PieSeries3DDataItem","PieSeries3DDataItem","depthValue","PieSeries","PieSeries3D_PieSeries3D","PieSeries3D","createSlice","Slice3D","slice","depth","depthPercent","percent","PieChart3D_PieChart3DDataItem","PieChart3DDataItem","PieChart","PieChart3D_PieChart3D","PieChart3D","invalidateDataUsers","SlicedChart_SlicedChartDataItem","SlicedChartDataItem","PercentChart","SlicedChart_SlicedChart","SlicedChart","FlowDiagramNode_FlowDiagramNode","FlowDiagramNode","legendSettings","Legend","draggable","inert","setStateOnChildren","invalidateLinks","handleHit","outgoingDataItems","toNode","incomingDataItems","fromNode","link","colorMode","gradient","stop_1","stops","stop_2","_incomingDataItems","sortBy","_incomingSorted","utils_String","fromName","Order","utils_Number","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","removeChildren","column","RoundedRectangle","_legendDataItem","itemContainer","deepInvalidate","FlowDiagramLink_FlowDiagramLink","FlowDiagramLink","positionBullets","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","addColor","setFill","_gradient","measureElement","_bullets","Bullet","Polyline","getTooltipX","getTooltipY","LinearGradient","FlowDiagram_FlowDiagramDataItem","FlowDiagramDataItem","toName","_link","link_1","links","addSprite","Chart","FlowDiagram_FlowDiagram","FlowDiagram","ColorSet","nodePadding","minNodeSize","linksContainer","nodesContainer","nodes","sortNodes","low","high","node","strokeModifier","LinearGradientModifier","opacities","fillModifier","strNode","getNodeValue","feedLegend","_sorted","sortedIterator","total","incomingTotal","outgoingTotal","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","_links","createLink","legend","legendData_1","LabelBullet_LabelBullet","LabelBullet","truncate","hideOversized","handleMaxSize","SankeyNode_SankeyNode","SankeyNode","nextInCoord","nextOutCoord","nameLabel","valueLabel","orientation_1","dx","dy","linkWidth","valueHeight","SankeyLink_SankeyLink","SankeyLink","tension","controlPointDistance","Polyspline","isTemplate","y0","y1","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","SankeyDiagram_SankeyDiagramDataItem","SankeyDiagramDataItem","SankeyDiagram_SankeyDiagram","SankeyDiagram","nodeAlign","_levelCount","level","getNodeLevel","levels","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","realValue","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","err","Animation","from","container","nextCoordinate","levelCoordinate","nodeCount","showReal","container_1","i_1","interpolationEasing","nodeHeight","_valueHeight","ChordNode_ChordNode","ChordNode","updateRotation","Slice","ix","iy","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","QuadraticCurve_QuadraticCurve","QuadraticCurve","y2","cpx","cpy","p1","p2","cp","d","point1","point2","ChordLink_ChordLink","ChordLink","fromX","fromY","toX","toY","mAngle1","mAngle2","ChordDiagram_ChordDiagramDataItem","ChordDiagramDataItem","ChordDiagram_ChordDiagram","ChordDiagram","chordContainer","newTotal","Column_Column","Column","createAssets","handleKidAdded","ColumnSeries_ColumnSeriesDataItem","ColumnSeriesDataItem","_column","setColumn","columns","_rangesColumns","ColumnSeries_ColumnSeries","ColumnSeries","_startLocation","_endLocation","clustered","columnsContainer","_columnsContainer","baseAxisSeries","clusterCount","cellStartLocation","disableUnusedColumns","validateDataElementReal","getStartLocation","simplifiedProcessing","getEndLocation","l","r","t","percentHeight","pixelPaddingLeft","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","offset","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","axisLenght","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","once","ev","populateString","realX","realY","realWidth","realHeight","virtualParent","setColumnStates","rangeColumn","rangesColumns","itemWidth","itemHeight","open_1","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","createColumnTemplate","fromOpenState_1","fromPreviousState_1","TreeMapSeries_TreeMapSeriesDataItem","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","TreeMapSeries_TreeMapSeries","TreeMapSeries","configField","TreeMap_TreeMapDataItem","TreeMapDataItem","rows","hasChildren","getDuration","childValue","TreeMap_TreeMap","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","getMinMax","layoutItems","_updateDataItemIndexes","_tempSeries","navigationData","parentDataItem","initSeries","reverse","createTreeSeriesReal","remove","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","binaryTree","dice","sliceDice","validateLayout","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","handleDataItemValueChange","hiddenInLegend","AxisRendererX3D_AxisRendererX3D","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D_AxisRendererY3D","AxisRendererY3D","getWidth","Column3D_Column3D","Column3D","column3D","Rectangle3D","ColumnSeries3D_ColumnSeries3DDataItem","ColumnSeries3DDataItem","ColumnSeries3D_ColumnSeries3D","ColumnSeries3D","XYChart3D_XYChart3DDataItem","XYChart3DDataItem","XYChart3D_XYChart3D","XYChart3D","fixLayout","fixColumns","depthIndex","s","maskColumns","Candlestick_Candlestick","Candlestick","lowLine","highLine","CandlestickSeries_CandlestickSeriesDataItem","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries_CandlestickSeries","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC_OHLC","OHLC","openLine","highLowLine","closeLine","OHLCSeries_OHLCSeriesDataItem","OHLCSeriesDataItem","OHLCSeries_OHLCSeries","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment_StepLineSeriesSegment","StepLineSeriesSegment","noRisers","vertical","StepLineSeries_StepLineSeriesDataItem","StepLineSeriesDataItem","StepLineSeries_StepLineSeries","StepLineSeries","prevPoint","point0","RadarColumn_RadarColumn","RadarColumn","radarColumn","RadarColumnSeries_RadarColumnSeriesDataItem","RadarColumnSeriesDataItem","RadarColumnSeries_RadarColumnSeries","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","FunnelSlice_FunnelSlice","FunnelSlice","bottomWidth","topWidth","expandDistance","pt","pb","pr","pl","ed","tl","tw","tr","br","bw","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mty","FunnelTick_FunnelTick","FunnelTick","_label","_slice","labelsOpposite","maxRight","p0","maxBottom","Tick","FunnelSeries_FunnelSeriesDataItem","FunnelSeriesDataItem","_sliceLink","sliceLink_1","sliceLinks","slicesContainer","PercentSeries","FunnelSeries_FunnelSeries","FunnelSeries","_nextY","labelsContainer","bottomRatio","createTick","initSlice","scale","handleSliceScale","handleSliceMove","initLabel","labelTemplate","alignLabels","dItem","_total","_count","arrangeLabels","getNextValue","nextValue","nextItem","formDataElement","sliceLink","decorateSlice","linkHeight","lastLabel","lastY","lastX","_sliceLinks","setAlignLabels","labelAlign","labelValign","PyramidSeries_PyramidSeriesDataItem","PyramidSeriesDataItem","PyramidSeries_PyramidSeries","PyramidSeries","pyramidHeight","valueIs","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","ticksContainer","pyramidWidth","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","sliceWidth","PictorialStackedSeries_PictorialStackedSeriesDataItem","PictorialStackedSeriesDataItem","PictorialStackedSeries_PictorialStackedSeries","PictorialStackedSeries","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","slices","hs","ConeColumn_ConeColumn","ConeColumn","coneColumn","Cone","ConeSeries_ConeSeriesDataItem","ConeSeriesDataItem","ConeSeries_ConeSeries","ConeSeries","radiusY","CurvedColumn_CurvedColumn","CurvedColumn","curvedColumn","CurvedColumnSeries_CurvedColumnSeriesDataItem","CurvedColumnSeriesDataItem","CurvedColumnSeries_CurvedColumnSeries","CurvedColumnSeries","DurationAxis_DurationAxisDataItem","DurationAxisDataItem","DurationAxis_DurationAxis","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet_CircleBullet","CircleBullet","circle","ErrorBullet_ErrorBullet","ErrorBullet","errorLine","isDynamic","NavigationBar_NavigationBarDataItem","NavigationBarDataItem","DataItem","NavigationBar_NavigationBar","NavigationBar","textLink","TextLink","_linksIterator","triangle","Triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","Component","window","am4charts","charts_namespaceObject"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit, gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add($time.round(new Date(this._maxZoomed), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc).getTime() - 1;\r\n\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tvar minDifference = Number.MAX_VALUE;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.baseInterval)) {\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tseries._baseInterval[this.uid] = this.baseInterval;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(new Date(time), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tdataItemsByAxis.setKey(startTime.toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\t\tif (axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.dateFormatter.utc);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this.dateFormatter) {\r\n\t\t\treturn this.dateFormatter.firstDayOfWeek;\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this.dateFormatter.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this.dateFormatter.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this.dateFormatter.utc).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._baseInterval) {\r\n\t\t\t\tseries._baseInterval[this.uid] = this._baseInterval;\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this.dateFormatter.utc);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\t\t\t/*\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = dataItemsByAxis.getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = dataItemsByAxis.getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => <number>x[key].getTime(), \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\tlet actualDate = $time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(new Date(closestTime), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * this.renderer.tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime.toString());\r\n\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\tif (series.tooltipText) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif(dataItem && previous){\r\n\t\t\tif(!series.connect && $type.isNumber(series.autoGapCount)){\r\n\t\t\t\tif(series.baseAxis == this){\r\n\t\t\t\t\tlet time = dataItem.dates[\"date\" + this.axisLetter].getTime();\r\n\t\t\t\t\tlet prevTime = previous.dates[\"date\" + this.axisLetter].getTime();\r\n\r\n\t\t\t\t\tif(time - prevTime > series.autoGapCount * this.baseDuration){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties.category);\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet firstSeriesDataItem: XYSeriesDataItem;\r\n\t\t\t\tlet lastSeriesDataItem: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet fdi = this.getFirstSeriesDataItem(series, dataItem.category);\r\n\t\t\t\t\t\tif (fdi) {\r\n\t\t\t\t\t\t\tif (!firstSeriesDataItem) {\r\n\t\t\t\t\t\t\t\tfirstSeriesDataItem = fdi;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (firstSeriesDataItem && fdi.index < firstSeriesDataItem.index) {\r\n\t\t\t\t\t\t\t\tfirstSeriesDataItem = fdi;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet ldi = this.getLastSeriesDataItem(series, dataItem.category);\r\n\t\t\t\t\t\tif (ldi) {\r\n\t\t\t\t\t\t\tif (!lastSeriesDataItem) {\r\n\t\t\t\t\t\t\t\tlastSeriesDataItem = ldi;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (lastSeriesDataItem && ldi.index > lastSeriesDataItem.index) {\r\n\t\t\t\t\t\t\t\tlastSeriesDataItem = ldi;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (firstSeriesDataItem) {\r\n\t\t\t\t\tseries.startIndex = firstSeriesDataItem.index;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif (lastSeriesDataItem) {\r\n\t\t\t\t\tseries.endIndex = lastSeriesDataItem.index + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif (dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\r\n\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData(){\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t//}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dataItems.create();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis.y = this.yAxis.pixelY;\r\n\t\tthis.x = this.xAxis.pixelX;\r\n\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tminY = $math.min(minY, stackY);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tminX = $math.min(minX, stackX);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tif (this.stackedSeries) {\r\n\t\t\t\t\tthis.stackedSeries.processValues(false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!working && this.stacked){\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param xKey       [description]\r\n\t * @param yKey       [description]\r\n\t * @param locationX  [description]\r\n\t * @param locationY  [description]\r\n\t * @param stackKeyX  [description]\r\n\t * @param stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures() && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tthis.getRanges();\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.selection.hide(0);\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(): boolean {\r\n\t\treturn this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.snapToSeries)) {\r\n\t\t\t\t\tconfig.snapToSeries = this.map.getKey(config.snapToSeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t *\r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tlet xx = x;\r\n\t\tlet yy = y;\r\n\r\n\t\tx -= this.pixelWidth;\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\t\t\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif(!axis.renderer){\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif(!axis.renderer){\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif(this.xAxes.length == 0 || this.yAxes.length == 0){\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis: Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif (snapToSeries) {\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\tlet point = seriesPoint.point;\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (axis != except) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis)=>{\r\n\t\t\tthis.xAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis)=>{\r\n\t\t\tthis.yAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif(source.cursor){\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif(source.scrollbarX){\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif(source.scrollbarY){\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n  \t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\r\n\t/*\r\n   public positionBullet(bullet: Bullet): void {\r\n\t   super.positionBullet(bullet);\r\n\r\n\t   let dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t   if (dataItem.segment) {\r\n\t\t   $object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param xKey      [description]\r\n\t * @param yKey      [description]\r\n\t * @param locationX [description]\r\n\t * @param locationY [description]\r\n\t * @param stackKeyX [description]\r\n\t * @param stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer(){\r\n\t\tif(!this._bulletsContainer){\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask(){\r\n\t\tif(!this._bulletsMask){\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif(color instanceof Color){\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false;\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif(middleLine){\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tgetTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tgetTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient(){\r\n\t\tif(!this._gradient){\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link:FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif(this._parseDataFrom == 0){\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif(!node.dataItem.visible){\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"], name?:string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes():DictionaryTemplate<string, this[\"_node\"]>{\r\n\t\tif(!this._nodes){\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event)=>{\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links():ListTemplate<this[\"_link\"]>{\r\n\t\tif(!this._links){\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node)=>{\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData(){\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/FlowDiagram.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = true;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/LabelBullet.ts","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyNode.ts","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyLink.ts","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\t//@todo solve circular so\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\t\t\tvalue = value * availableHeight / (availableHeight - (this._levelNodesCount[key] - 1) * this.nodePadding);\r\n\r\n\t\t\tif (this.maxSum < value) {\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SankeyDiagram.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif(treeMapDataItem){\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count );\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param xKey      [description]\r\n\t * @param yKey      [description]\r\n\t * @param locationX [description]\r\n\t * @param locationY [description]\r\n\t * @param stackKeyX [description]\r\n\t * @param stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = \"\";\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = \"\"\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelSlice.ts","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelTick.ts","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += dItem.getWorkingValue(\"value\") / dItem.value;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttotal += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\t// FunnelSlice\r\n\t\t\tlet slice = dataItem.slice;\r\n\t\t\tslice.orientation = this.orientation;\r\n\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\r\n\t\t\tsliceLink.fill = slice.fill;\r\n\r\n\t\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\t\tsliceLink.disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value > 0) {\r\n\t\t\td = workingValue / dataItem.value;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = $math.max(0, maxHeight / this._count * d / this._total - linkHeight);\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = maxWidth / this._count * d * 1 / this._total - linkWidth;\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tlet lastLabel = this.labels.getIndex(count - 1);\r\n\r\n\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\tif (count > 1) {\r\n\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY - label.measuredHeight;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX - label.measuredWidth;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/FunnelSeries.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - newHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y;\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - newWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = null\n// module chunks = "],"sourceRoot":""}